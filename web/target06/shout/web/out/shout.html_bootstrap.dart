import "dart:html" as CB;import "dart:async" as tB;import "dart:collection" as uB;import "dart:isolate" as YD;class JD{static const  KD="Chrome";final  CD;final  minimumVersion;const JD(this.CD,[this.minimumVersion]);}class LD{const LD();}class MD{final  name;const MD(this.name);}class ND{const ND();}class OD{const OD();}final bB=new m();var cB=''; get DB{if(YC){ZC(bB,EB.eB,'shoutThis');}return cB;}set DB( g){if(XC(bB)){aC(bB,EB.eB,'shoutThis',cB,g);}cB=g;} LC(){} get MC=>DB.toUpperCase(); get NC=>DB+DB.split('').reversed.join(); OC(){var dD=BD;var eD,fD,gD,hD,iD;var jD=new UD(dD);eD=dD.nodes[3];jD.listen(eD.onInput,(h){DB=eD.value;});jD.HD(()=>DB,(g){if(eD.value!=g)eD.value=g;},false,false);fD=dD.nodes[5];var kD=jD.YB(()=>DB.length,false);fD.nodes.addAll([new CB.Text('      Length: '),kD,new CB.Text(' ')]);gD=dD.nodes[7];var lD=jD.YB(()=>MC,false);gD.nodes.addAll([new CB.Text('     Shouted: '),lD,new CB.Text(' ')]);hD=dD.nodes[9];var mD=jD.YB(()=>(DB.length>=6)?DB.substring(1,5):DB.substring(0,0),false);hD.nodes.addAll([new CB.Text('   Substring: '),mD,new CB.Text(' ')]);iD=dD.nodes[11];var nD=jD.YB(()=>NC,false);iD.nodes.addAll([new CB.Text(' Palindromic: '),nD,new CB.Text(' ')]);jD.mB();jD.insert();}main(){BC=true;LC();OC();}var vB=false;var PC=l.wB;class FB{final  name; get HC=>(parent==null||parent.name=='')?name:'${parent.HC}.${name}';final  parent;var oD;var children;var pD;var qD;factory FB( g){if(g.startsWith('.')){throw new ArgumentError("name shouldn't start with a '.'");}if(LB==null)LB=<String,FB>{};if(LB.containsKey(g))return LB[g];var h=g.lastIndexOf('.');var i=null;var j;if(h==-1){if(g!='')i=new FB('');j=g;}else{i=new FB(g.substring(0,h));j=g.substring(h+1);}final k=new FB.ZD(j,i);LB[g]=k;return k;}FB.ZD(this.name,this.parent):children=new Map<String,FB>(){if(parent!=null)parent.children[name]=this;} get ZB{if(vB){if(oD!=null)return oD;if(parent!=null)return parent.ZB;}return PC;} ED( g)=>(g>=ZB); log( h, j,[k]){if(ED(h)){var i=new dB(h,j,HC,k);if(vB){var g=this;while (g!=null){g.rD(i);g=g.parent;}}else{QC.rD(i);}}} info( g,[h])=>log(l.wB,g,h); qB( g,[h])=>log(l.RC,g,h); rD( g){if(pD!=null){pD.add(g);}}static  get QC=>new FB('');static var LB;}class l implements Comparable<l>{final  name;final  value;const l(this.name,this.value);static const  wB=const l('INFO',800);static const  RC=const l('WARNING',900); operator==( g)=>g!=null&&value==g.value; operator<( g)=>value<g.value; operator<=( g)=>value<=g.value; operator>( g)=>value>g.value; operator>=( g)=>value>=g.value; compareTo( g)=>value-g.value; get hashCode=>value; toString()=>name;}class dB{final  ZB;final  message;final  FD;final  time;final  ID;static var SC=0;var exception;dB(this.ZB,this.message,this.FD,[this.exception]):time=new DateTime.now(),ID=dB.SC++ ;}typedef  v( e);typedef  TC( changes);typedef  AB();typedef  UC();class TB{final oldValue;final newValue;final  changes;TB(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is TB&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>lC(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class EB{static const eB=1;static const fB=2;static const xB=fB|4;static const yB=fB|8;final  type;final key;final oldValue;final newValue;EB(this.type,this.key,this.oldValue,this.newValue); operator==(g){return g is EB&&type==g.type&&key==g.key&&oldValue==g.oldValue&&newValue==g.newValue;} get hashCode=>mC(type,key,oldValue,newValue); toString(){var g;switch (type){case eB:g='field';break;case fB:g='index';break;case xB:g='insert';break;case yB:g='remove';break;}return '#<ChangeRecord ${g} ${key} from ${oldValue} to ${newValue}>';}} VC(g, i,[ k]){if(g is m){var h=g;return gB(h,(q){i(new TB(h,h,q));});}var j=new UB(g,i,k);if(!j.sD()){return bC;}return j.tD;} gB( g, h){if(g.KB==null)g.KB=new hB();var i=g.KB.add(h);return i.remove;}class m{var KB;var JB;final  hashCode= ++m.WC;static var WC=0;} XC( g)=>g.KB!=null&&g.KB.head!=null; get YC=>IB!=null; ZC( g, h,i)=>IB.uD(g,h,i); aC( g, h,k, i, j){if((h&(EB.xB|EB.yB))==0){if(i==j)return;}if(GB==null){GB=[] ;nC(cC);}if(g.JB==null){g.JB=[] ;GB.add(g);}g.JB.add(new EB(h,k,i,j));} bC(){}var IB;var zB=100;var GB;var HB; cC(){var q=0;while (GB!=null||HB!=null){var i=GB;GB=null;var j=HB;HB=null;if(q++ ==zB){dC(i,j);return;}if(i!=null){for(var g in i){var BB=g.JB;g.JB=null;for(var h=g.KB.head;h!=null;h=h.next){var k=h.value;try {k(BB);}catch (SB,rB){MB(SB,rB,k,'from ${g}');}}}}if(j!=null){j.forEach((KC,sB){sB.vD();});}}} dC( h, i){var g=[] ;if(h!=null){for(var j in h){var BB=j.JB;g.add('${j} ${BB}');}}if(i!=null){for(var k in i.values){var q=k.vD();if(q!=null)g.add('${k} ${q}');}}GB=null;HB=null;var SB='exceeded notifiction limit of ${zB}, possible ' 'circular reference in observer callbacks: ${g.take(10).join(", ")}';gC(SB);}class UB{static var eC=0;final  wD= ++UB.eC;final  xD;final  yD;final  zD;final  AE=new Map();final  BE=[] ;var CE=false;var DE;UB(this.xD,this.yD,this.zD); toString()=>zD!=null?'<observer ${wD}: ${zD}>':'<observer ${wD}>'; sD(){var g=IB;IB=this;try {DE=xD();if(DE is Iterable&&DE is !List&&DE is !m){DE=(DE as Iterable).toList();}}catch (h,i){MB(h,i,xD,'from ${this}');DE=null;}AE.forEach(EE);AE.clear();assert(IB==this);IB=g;FE();return BE.length>0;} GE( g){try {yD(g);}catch (h,i){MB(h,i,yD,'from ${this}');}} FE(){var g=DE;if(g is !m)return;BE.add(gB(g,(h){GE(new TB(g,g,h));}));} uD( j, k,g){var i=AE.putIfAbsent(j,()=>new Map());try {var h=i[g];if(h==null)h=0;i[g]=h|k;}catch (q,BB){MB(q,BB,g,'hashCode or operator == from ${this}');}} EE( i, j){BE.add(gB(i,(k){if(CE)return;for(var g in k){var h=j[g.key];if(h!=null&&(h&g.type)!=0){CE=true;if(HB==null){HB=new uB.SplayTreeMap();}HB[wD]=this;return;}}}));} tD(){for(var g in BE){g();}CE=false;} vD(){if(!CE)return null;var g=DE;tD();sD();try {if(g==DE)return null;}catch (i,j){MB(i,j,g,'operator == from ${this}');return null;}var h=new TB(g,DE);GE(h);return h;}}typedef  fC( message);var gC=(g)=>print(g);typedef  hC(error,stackTrace,obj, message);var MB=iC; iC(g,h,i, j){print('web_ui.observe: unhandled error calling ${i} ${j}.\n' 'error:\n${g}\n\nstack trace:\n${h}');}class jC{}class kC{}class t<u>{var HE;var IE;var JE;var KE;t.aD( g,this.JE):KE=g{if(JE!=null)JE.LE++ ;} get next=>IE; get value=>KE;set value( g)=>KE=g; ME( g, h){IE=h;HE=g;if(g!=null)g.IE=this;if(h!=null)h.HE=this;return this;} append( g)=>new t<u>.aD(g,JE).ME(this,IE); remove(){if(JE==null)return;JE.LE-- ;if(HE!=null){HE.IE=IE;}else{JE.NE=IE;}if(IE!=null){IE.HE=HE;}else{JE.OE=HE;}IE=null;HE=null;JE=null;}}class hB<u> extends uB.IterableBase<u>{var NE;var OE; get length=>LE;var LE=0;hB(){} get head=>NE; add( h){var g=new t<u>.aD(h,this);if(OE==null)return NE=OE=g;return OE=g.ME(OE,null);} addLast( g)=>add(g); addAll( g)=>g.forEach(add); get iterator=>new PD<u>(this);}class PD<u> implements Iterator<u>{var PE;var JE;var QE;var RE=-1;PD(this.JE){PE=new List<t>(JE.length);var h=0;var g=JE.head;while (g!=null){PE[h++ ]=g;g=g.next;}} get current=>QE; moveNext(){do{RE++ ;}while(RE<PE.length&&PE[RE].JE!=JE);if(RE<PE.length){QE=PE[RE].value;return true;}else{QE=null;return false;}}}NB(g,h)=>g.hashCode*31+h.hashCode;lC(g,h,i)=>NB(NB(g,h),i);mC(g,h,i,j)=>NB(NB(g,h),NB(i,j)); nC( h()){var g=new YD.ReceivePort();g.receive((i,j){g.close();h();});g.toSendPort().send(null);}var oC=new QD();class QD implements CB.NodeTreeSanitizer{ sanitizeTree( g){}} pC(h, g,[ i]){if(h is CB.Node){g.replaceWith(h);return h;}var j=h is jC;if(i==null){i=h.toString();}if(!j&&g is CB.Text){g.text=i;}else{var k=g;g=!j?new CB.Text(i):new CB.Element.html(i,treeSanitizer:oC);k.replaceWith(g);}return g;} qC(g){if(g is kC)return g.toString();g=g.toString();return sC(g)?g:'#';}const rC=const["http","https","ftp","mailto"]; sC( h){var g=Uri.parse(h).scheme;if(g=='')return true;return rC.contains(g.toLowerCase())||"MAILTO"==g.toUpperCase();}abstract class VB{ mB(){} insert(); remove();}class RD extends VB{final  GC;var SE;final  listener;RD(this.GC,this.listener); insert(){SE=GC.listen(listener);} remove(){SE.cancel();SE=null;}}abstract class AC extends VB{final exp;final  isFinal;final  nB;var aB;AC(this.exp,this.isFinal):nB=iB&&WB!=null?WB():null; insert(){if(isFinal){oB();}else if(aB!=null){throw new StateError('binding already attached');}else{aB=pB();}} remove(){if(!isFinal){aB();aB=null;}} oB(); pB();}class SD extends AC{final  action;SD(g,this.action, h):super(g,h); oB()=>action(new TB(null,exp())); pB()=>CC(exp,action,'generic-binding',nB);}class TD extends AC{final  JC;final  IC;TD( g,this.JC,this.IC, h):super(g,h); TE(g){JC(IC?qC(g):g);} oB()=>TE(exp()); pB()=>CC(exp,(g)=>TE(g.newValue),'dom-property-binding',nB);}class UD extends VB{final  GD;final  children=[] ;final  nodes=[] ;UD(this.GD); listen( g, h){children.add(new RD(g,(i){h(i);wC();}));} YB( h,i){var g=new CB.Text('');children.add(new SD(()=>'${h()}',(j){g=pC(h(),g,j.newValue);},i));return g;} HD(g,h,i,[j=false]){children.add(new TD(g,h,j,i));} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); mB(){for(var g=0,h=children.length;g<h;g++ ){children[g].mB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}var BC=false;var iB=false;var WB=(){try {throw "";}catch (h,g){return g.toString();}};final  OB=new FB('watcher'); tC(g, q,[ j, BB]){if(BC)return VC(g,q);if(q==null)return (){};if(PB==null)PB=new hB<QB>();j=j==null?'<unnamed>':j;var i;var h=o.AD;if(g is FC){i=(g as FC).UE;}else if(g is Function){i=g;try {var k=g();if(k is List){h=o.RB;}else if(k is Iterable){h=o.RB;i=()=>g().toList();}else if((k is uB.LinkedHashMap)||(k is uB.SplayTreeMap)){h=o.lB;}else if(k is Map){h=o.kB;}}catch (SB,rB){OB.qB('evaluating ${j} watcher threw error (${SB}, ${rB})');}}else if(g is List){i=()=>g;h=o.RB;}else if(g is Iterable){i=()=>g.toList();h=o.RB;}else if((g is uB.LinkedHashMap)||(g is uB.SplayTreeMap)){i=()=>g;h=o.lB;}else if(g is Map){i=()=>g;h=o.kB;}if(iB&&BB==null&&WB!=null){BB=WB();}var sB=uC(h,i,q,j,BB);var KC=PB.add(sB);return KC.remove;} uC( k, g, h, i, j){switch (k){case o.RB:return new VD(g,h,i,j);case o.lB:return new XD(g,h,i,j);case o.kB:return new WD(g,h,i,j);default:return new QB(g,h,i,j);}} CC(h, i,[ j, k]){var q=tC(h,i,j,k);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new TB(null,g));return q;}var PB;class QB{final  debugName;var location;final  VE;static var vC=0;final  UE;final  WE;var XE;QB(this.UE,this.WE,this.debugName,this.location):VE=vC++ {XE=UE();} toString()=>'${debugName} (id: #${VE})'; DD(){var g=YE();if(ZE(g)){var h=XE;aE(g);WE(new TB(h,g));return true;}return false;} ZE(g)=>XE!=g; aE(g){if(iB){if(location!=null){OB.info('watcher updated: ${this}, defined at:\n${location}');location=null;}else{OB.info('watcher updated: ${this}');}}XE=g;}YE(){try {return UE();}catch (g,h){OB.qB('${this} watcher threw an exception: ${g}, ${h}');}return XE;}}final  DC=10; wC(){if(PB==null)return;var g;var h=0;do{g=false;for(var i in PB){if(i.DD()){g=true;}}}while(g&& ++h<DC);if(h==DC){OB.qB('Possible loop in watchers propagation, stopped dispatch.');}}typedef  EC<xC>();typedef  yC<xC>( value);class FC<xC>{}class VD<xC> extends QB{VD(g, h, i, j):super(g,h,i,j){aE(YE());} ZE( g){return jB(XE,g);} aE(g){XE=new List<xC>.from(g);}}class WD<XB,zC> extends QB{WD(g, h, i, j):super(g,h,i,j){aE(YE());} ZE( g){var i=XE.keys;if(i.length!=g.keys.length)return true;var j=i.iterator;while (j.moveNext()){var h=j.current;if(!g.containsKey(h))return true;if(XE[h]!=g[h])return true;}return false;} aE(g){XE=new Map<XB,zC>.from(g);}}class XD<XB,zC> extends QB{XD(g, h, i, j):super(g,h,i,j){aE(YE());} ZE( g){return jB(g.keys,XE.keys)||jB(g.values,XE.values);} aE(g){XE=new uB.LinkedHashMap.from(g);}} jB( i, j){var h=i.iterator;var g=j.iterator;while (h.moveNext()){if(!g.moveNext())return true;if(h.current!=g.current)return true;}return g.moveNext();}class o{final bE;const o.bD(this.bE);toString()=>'Enum.${bE}';static const RB=const o.bD('LIST');static const kB=const o.bD('HASH_MAP');static const lB=const o.bD('ORDERED_MAP');static const AD=const o.bD('OTHER');}var BD=CB.document.body;
//# sourceMappingURL=shout.html_bootstrap.dart.map
//@ sourceMappingURL=shout.html_bootstrap.dart.map
